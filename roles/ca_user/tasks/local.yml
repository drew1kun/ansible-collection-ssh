---
# LOCAL SSH CLIENT WORKSTATION TASKS

- name: "[local.yml] LOCAL: Generate UserCA if it does not exist"
  # Using defaults here to make possible specifying only some of the properties
  # for ssh_userCA var at the play level so that skipping the rest won't cause isses. E.g.:
  #   ssh_userCA:
  #     path: /path/override
  community.crypto.openssh_keypair:
    path:           "{{ ssh_userCA.path|string }}"
    type:           "{{ ssh_userCA.type|default(omit) }}"
    size:           "{{ ssh_userCA.size|default(None)|int or omit }}"
    comment:        "{{ ssh_userCA.comment|default(omit) }}"
    passphrase:     "{{ ssh_userCA_key.passphrase|default(omit) }}"
    # NOTE: regenerate key if it does not conform with set options
    # Fail if the passphrase is wrong.
    #regenerate:     "{{ 'partial_idempotence' if ssh_userCA.passphrase is defined else 'never' }}"
    # NOTE: don't regenerate key if it exists but does not conform with set options:
    regenerate:     never
    backend:        auto

- name: "[local.yml] LOCAL: Issue User Certificates"
  community.crypto.openssh_cert:
    type:           user
    valid_from:     always
    valid_to:       "{{ ssh_userCA_cert.expiry|default('forever')|string }}"
    signing_key:    "{{ ssh_userCA.path|string }}"
    public_key:     "{{ item.1 }}"
    path:           "{{ (item.1.split('.pub')|map('trim'))|join+'-cert.pub' }}"
    serial_number:  "{{ item.0.sn|int }}"
    principals:     "{{ item.0.principal.split(',')|list }}"
    identifier:     "{{ item.0.id|string }}"  # cert won't be reissued even if id is new
  register: ssh_userCA_certs_issued
  with_nested:
    - "{{ ssh_userCA_cert.principals }}"
    - "{{ lookup('fileglob', ssh_userCA_keys_path+'/*.pub').split(',') }}"
  when:
    - "item.0.user in item.1"
    - "'-cert.pub' not in item.1"

- name: "[main] LOCAL: Get newly issued User Certs' details"
  ansible.builtin.command: "ssh-keygen -L -f {{ item }}"
  register: ssh_userCA_cert_details
  loop: "{{ lookup('fileglob', ssh_userCA_keys_path+'/*-cert.pub').split(',')|flatten(1) }}"
  changed_when: false
  when: ssh_userCA_certs_issued.changed

- name: "[local.yml] PLEASE CHECK IF PRINCIPALS AND SN OF ISSUED CERTS ARE CORRECT"
  vars:
    ssh_userCA_check_certs: >-
      {{
        ssh_userCA_cert_details.results
        |map(attribute='stdout')
        |flatten
      }}
  debug:
    msg: "{{ ssh_userCA_check_certs }}"
  when: ssh_userCA_certs_issued.changed
